// Generated by CoffeeScript 1.3.3
(function() {
  var AppData, Art, Block, Builder, Bullet, ClipVertex, Domino, Editor, Entity, Explosion, Features, Fireball, Game, GameController, Grid, Hero, IBroadPhase, ImageLoader, Keyboard, Level, Level2, Pendulum, Physics, Sprite, Text, World, b2AABB, b2Body, b2BodyDef, b2Bound, b2BoundValues, b2CircleContact, b2CircleShape, b2Collision, b2Color, b2Contact, b2ContactConstraint, b2ContactConstraintPoint, b2ContactEdge, b2ContactFactory, b2ContactFilter, b2ContactID, b2ContactImpulse, b2ContactListener, b2ContactManager, b2ContactPoint, b2ContactRegister, b2ContactResult, b2ContactSolver, b2Controller, b2ControllerEdge, b2DebugDraw, b2DestructionListener, b2Distance, b2DistanceInput, b2DistanceJoint, b2DistanceJointDef, b2DistanceOutput, b2DistanceProxy, b2DynamicTree, b2DynamicTreeBroadPhase, b2DynamicTreeNode, b2DynamicTreePair, b2EdgeAndCircleContact, b2EdgeChainDef, b2EdgeShape, b2FilterData, b2Fixture, b2FixtureDef, b2FrictionJoint, b2FrictionJointDef, b2GearJoint, b2GearJointDef, b2Island, b2Jacobian, b2Joint, b2JointDef, b2JointEdge, b2LineJoint, b2LineJointDef, b2Manifold, b2ManifoldPoint, b2MassData, b2Mat22, b2Mat33, b2Math, b2MouseJoint, b2MouseJointDef, b2NullContact, b2Point, b2PolyAndCircleContact, b2PolyAndEdgeContact, b2PolygonContact, b2PolygonShape, b2PositionSolverManifold, b2PrismaticJoint, b2PrismaticJointDef, b2PulleyJoint, b2PulleyJointDef, b2RayCastInput, b2RayCastOutput, b2RevoluteJoint, b2RevoluteJointDef, b2Segment, b2SeparationFunction, b2Settings, b2Shape, b2Simplex, b2SimplexCache, b2SimplexVertex, b2Sweep, b2TOIInput, b2TimeOfImpact, b2TimeStep, b2Transform, b2Vec2, b2Vec3, b2WeldJoint, b2WeldJointDef, b2World, b2WorldManifold, b2internal,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Art = (function() {

    Art.prototype.world = null;

    function Art(world) {
      this.world = world;
    }

    Art.prototype.get_alpha = function() {
      return Game.context.globalAlpha;
    };

    Art.prototype.alpha = function(alpha) {
      return Game.context.globalAlpha = alpha;
    };

    Art.prototype.color = function(color) {
      Game.context.fillStyle = color;
      return Game.context.strokeStyle = color;
    };

    Art.prototype.fill_color = function(color) {
      return Game.context.fillStyle = color;
    };

    Art.prototype.stroke_color = function(color) {
      return Game.context.strokeStyle = color;
    };

    Art.prototype.lineC = function(x1, y1, x2, y2) {
      Game.context.beginPath();
      Game.context.moveTo(x1 + 0.5, y1 + 0.5);
      Game.context.lineTo(x2 + 0.5, y2 + 0.5);
      return Game.context.stroke();
    };

    Art.prototype.line = function(x, y, x2, y2) {
      return this.lineC(x + this.world.x, y + this.world.y, x2 + this.world.x, y2 + this.world.y);
    };

    Art.prototype.rectangleC = function(x, y, w, h, filled) {
      if (filled == null) {
        filled = false;
      }
      if (filled === true) {
        return Game.context.fillRect(x, y, w, h);
      } else {
        return Game.context.strokeRect(x, y, w, h);
      }
    };

    Art.prototype.rectangle = function(x, y, w, h, filled) {
      if (filled == null) {
        filled = false;
      }
      return Art.rectangleC(x + Art.offset_x, y + Art.offset_y, w, h, filled);
    };

    return Art;

  })();

  Entity = (function() {

    function Entity() {}

    Entity.prototype.x = 0;

    Entity.prototype.y = 0;

    Entity.prototype.sx = 0;

    Entity.prototype.sy = 0;

    Entity.prototype.w = void 0;

    Entity.prototype.h = void 0;

    Entity.prototype.r = 0;

    Entity.prototype.visible = true;

    Entity.prototype.name = null;

    Entity.prototype.scale_x = 1;

    Entity.prototype.scale_y = 1;

    Entity.prototype.offset_x = 0;

    Entity.prototype.offset_y = 0;

    Entity.prototype.alpha = 1;

    Entity.prototype.rotation = 0;

    Entity.prototype.index = 1;

    Entity.prototype.sprite = null;

    Entity.prototype.world = null;

    Entity.prototype.art = null;

    Entity.prototype.z = 0;

    Entity.prototype.draw = function() {
      if (this.sprite) {
        this.sprite.x = this.world.x + this.x;
        this.sprite.y = this.world.y + this.y;
        return this.sprite.draw();
      }
    };

    Entity.prototype.init = function() {
      return null;
    };

    Entity.prototype.step = function() {
      return null;
    };

    Entity.prototype.move_towards = function(x, y, speed) {
      var dir;
      dir = this.direction_to(x, y);
      this.x += Math.cos(dir / 180 * Math.PI) * speed;
      return this.y -= Math.sin(dir / 180 * Math.PI) * speed;
    };

    Entity.prototype.direction_to = function(x, y) {
      var dx, dy;
      dx = x - this.x;
      dy = y - this.y;
      return -Math.atan2(dy, dx) * 180 / Math.PI;
    };

    Entity.prototype.nearest = function(c) {
      var distance, e, nearest, shortest, _i, _len, _ref;
      shortest = 9999;
      nearest = null;
      _ref = this.world.all_entities();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.name === c && e !== this) {
          distance = this.objects_distance(this, e);
          if (distance < shortest) {
            nearest = e;
            shortest = distance;
          }
        }
      }
      return nearest;
    };

    Entity.prototype.hit = function(c) {
      var e, _i, _len, _ref;
      _ref = this.world.all_entities();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.name === c) {
          if (this.objects_touch(this, e)) {
            return e;
          }
        }
      }
      return null;
    };

    Entity.prototype.hits = function(c) {
      var e, res, _i, _len, _ref;
      res = [];
      _ref = this.world.all_entities();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.name === c) {
          if (this.objects_touch(this, e)) {
            res.push(e);
          }
        }
      }
      return res;
    };

    Entity.prototype.spawn = function(cl) {
      return this.world.spawn(cl, this.x, this.y);
    };

    Entity.prototype.objects_touch_circle = function() {
      return this.objects_distance(obj1, obj2) <= obj1.r + obj2.r;
    };

    Entity.prototype.objects_touch = function(obj1, obj2) {
      var d1, d2, l1, l2, r1, r2, u1, u2;
      l1 = obj1.x - obj1.w / 2;
      r1 = obj1.x + obj1.w / 2;
      l2 = obj2.x - obj2.w / 2;
      r2 = obj2.x + obj2.w / 2;
      u1 = obj1.y - obj1.h / 2;
      d1 = obj1.y + obj1.h / 2;
      u2 = obj2.y - obj2.h / 2;
      d2 = obj2.y + obj2.h / 2;
      return r1 > l2 && l1 < r2 && d1 > u2 && u1 < d2;
    };

    Entity.prototype.objects_distance = function(obj1, obj2) {
      return this.points_distance(obj1.x, obj1.y, obj2.x, obj2.y);
    };

    Entity.prototype.points_distance = function(x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    };

    Entity.prototype.destroy = function() {
      return this.world.destroy(this);
    };

    Entity.prototype.reset = function() {
      this.x = this.sx;
      return this.y = this.sy;
    };

    Entity.prototype.mouse_hits = function() {
      return Keyboard.MOUSE_X > this.x - this.w / 2 && Keyboard.MOUSE_X < this.x + this.w / 2 && Keyboard.MOUSE_Y > this.y - this.h / 2 && Keyboard.MOUSE_Y < this.y + this.h / 2;
    };

    return Entity;

  })();

  Game = (function() {

    function Game() {}

    Game.context = null;

    Game.worlds = [];

    Game.images = {};

    Game.zoom_level = 1;

    Game.pause = false;

    Game.editor = null;

    Game.mode = "";

    Game.add_world = function() {
      return Game.worlds.push(new World);
    };

    Game.init = function(mode) {
      var i;
      this.mode = mode;
      Game.context = Game.create_canvas();
      Game.set_zoom(AppData.scale);
      Game.setup_keyboard();
      i = new ImageLoader();
      i.onload = Game.start;
      return i.load_images();
    };

    Game.start = function() {
      Game.add_world();
      if (Game.mode === "build") {
        Game.editor = new Editor(Game.worlds[0]);
      }
      return setInterval(Game.run, 16);
    };

    Game.set_zoom = function(rate) {
      Game.context.scale(rate / Game.zoom_level, rate / Game.zoom_level);
      return Game.zoom_level = rate;
    };

    Game.create_canvas = function() {
      var canvas, context;
      canvas = document.createElement("canvas");
      canvas.width = AppData.width * AppData.scale;
      canvas.height = AppData.height * AppData.scale;
      document.body.appendChild(canvas);
      context = canvas.getContext("2d");
      context.textBaseline = 'top';
      context.imageSmoothingEnabled = false;
      context.mozImageSmoothingEnabled = false;
      context.webkitImageSmoothingEnabled = false;
      return context;
    };

    Game.setup_keyboard = function() {
      var canvas,
        _this = this;
      canvas = document.getElementsByTagName("canvas")[0];
      document.body.onkeydown = function() {
        return Keyboard.key_pressed(event.keyCode);
      };
      document.body.onkeyup = function() {
        return Keyboard.key_released(event.keyCode);
      };
      canvas.onmousemove = function() {
        return Keyboard.mouse_move(event);
      };
      canvas.onmousedown = function() {
        return Keyboard.mouse_down(event.which);
      };
      canvas.onmouseup = function() {
        return Keyboard.mouse_up(event.which);
      };
      canvas.oncontextmenu = function() {
        return false;
      };
      canvas.addEventListener("touchstart", Keyboard.touch_start, false);
      canvas.addEventListener("touchend", Keyboard.touch_end, false);
      canvas.addEventListener("touchcancel", Keyboard.touch_end, false);
      canvas.addEventListener("touchleave", Keyboard.touch_end, false);
      return canvas.addEventListener("touchmove", Keyboard.touch_move, false);
    };

    Game.run = function() {
      var world, _i, _len, _ref;
      _ref = Game.worlds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        world = _ref[_i];
        world.step();
        world.draw();
      }
      if (Game.editor) {
        Game.editor.step();
        return Game.editor.draw();
      }
    };

    return Game;

  }).call(this);

  ImageLoader = (function() {
    var i, images_loaded, images_n;

    images_loaded = 0;

    images_n = 0;

    i = null;

    function ImageLoader() {
      this.image_loaded = __bind(this.image_loaded, this);
      images_n = Object.keys(AppData.sprites).length;
    }

    ImageLoader.prototype.load_images = function() {
      var file, name, _ref, _results;
      _ref = AppData.sprites;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        _results.push(this.load_image("sprites/" + file, name));
      }
      return _results;
    };

    ImageLoader.prototype.load_image = function(url, name, im) {
      var image,
        _this = this;
      image = new Image;
      image.src = url;
      image.onload = function() {
        return _this.image_loaded(name, image);
      };
      return image;
    };

    ImageLoader.prototype.image_loaded = function(name, image) {
      Game.images[name] = image;
      images_loaded += 1;
      if (images_loaded === images_n) {
        return this.onload();
      }
    };

    return ImageLoader;

  })();

  Keyboard = (function() {

    function Keyboard() {}

    Keyboard._keyCodes = {
      'BACKSPACE': 8,
      'TAB': 9,
      'ENTER': 13,
      'SHIFT': 16,
      'CTRL': 17,
      'ALT': 18,
      'CAPSLOCK': 20,
      'ESCAPE': 27,
      'SPACE': 32,
      'END': 35,
      'HOME': 36,
      'LEFT': 37,
      'UP': 38,
      'RIGHT': 39,
      'DOWN': 40,
      'INSERT': 45,
      'DELETE': 46,
      '0': 48,
      '1': 49,
      '2': 50,
      '3': 51,
      '4': 52,
      '5': 53,
      '6': 54,
      '7': 55,
      '8': 56,
      '9': 57,
      'A': 65,
      'B': 66,
      'C': 67,
      'D': 68,
      'E': 69,
      'F': 70,
      'G': 71,
      'H': 72,
      'I': 73,
      'J': 74,
      'K': 75,
      'L': 76,
      'M': 77,
      'N': 78,
      'O': 79,
      'P': 80,
      'Q': 81,
      'R': 82,
      'S': 83,
      'T': 84,
      'U': 85,
      'V': 86,
      'W': 87,
      'X': 88,
      'Y': 89,
      'Z': 90,
      'MULTIPLY': 106,
      'ADD': 107,
      'SUBTRACT': 109,
      'MOUSE_LEFT': 'MOUSE_LEFT',
      'MOUSE_MIDDLE': 'MOUSE_MIDDLE',
      'MOUSE_RIGHT': 'MOUSE_RIGHT',
      'TOUCH': 'TOUCH'
    };

    Keyboard._pre_pressed = [];

    Keyboard._pre_released = [];

    Keyboard._pressed = [];

    Keyboard._released = [];

    Keyboard._hold = [];

    Keyboard.key_released = function(c) {
      return Keyboard._pre_released.push(c);
    };

    Keyboard.key_pressed = function(c) {
      return Keyboard._pre_pressed.push(c);
    };

    Keyboard.touch_start = function(e) {
      return Keyboard._pre_pressed.push('TOUCH');
    };

    Keyboard.touch_end = function(e) {
      return Keyboard._pre_released.push('TOUCH');
    };

    Keyboard.touch_move = function(e) {
      Keyboard.TOUCH_X = e.touches[0].pageX;
      return Keyboard.TOUCH_Y = e.touches[0].pageY;
    };

    Keyboard.mouse_down = function(e) {
      switch (e) {
        case 1:
          Keyboard._pre_pressed.push('MOUSE_LEFT');
          break;
        case 2:
          Keyboard._pre_pressed.push('MOUSE_MIDDLE');
          break;
        case 3:
          Keyboard._pre_pressed.push('MOUSE_RIGHT');
      }
      return false;
    };

    Keyboard.mouse_up = function(e) {
      switch (e) {
        case 1:
          Keyboard._pre_released.push('MOUSE_LEFT');
          break;
        case 2:
          Keyboard._pre_released.push('MOUSE_MIDDLE');
          break;
        case 3:
          Keyboard._pre_released.push('MOUSE_RIGHT');
      }
      return false;
    };

    Keyboard.mouse_move = function(e) {
      Keyboard.MOUSE_XC = e.offsetX / Game.zoom_level;
      Keyboard.MOUSE_YC = e.offsetY / Game.zoom_level;
      Keyboard.MOUSE_X = Keyboard.MOUSE_XC - Art.offset_x;
      return Keyboard.MOUSE_Y = Keyboard.MOUSE_YC - Art.offset_y;
    };

    Keyboard.hold = function(keyName) {
      return Keyboard._hold.indexOf(Keyboard._keyCodes[keyName]) !== -1;
    };

    Keyboard.press = function(keyName) {
      return Keyboard._pressed.indexOf(Keyboard._keyCodes[keyName]) !== -1;
    };

    Keyboard.release = function(keyName) {
      return Keyboard._released.indexOf(Keyboard._keyCodes[keyName]) !== -1;
    };

    Keyboard.step = function() {
      Keyboard._pressed = Keyboard._pre_pressed.splice(0);
      Keyboard._released = Keyboard._pre_released.splice(0);
      Keyboard._hold = Keyboard._hold.concat(Keyboard._pressed);
      Keyboard._hold = Keyboard._hold.diff(Keyboard._released);
      Keyboard._pre_pressed = [];
      return Keyboard._pre_released = [];
    };

    return Keyboard;

  })();

  b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge;

  b2Mat22 = Box2D.Common.Math.b2Mat22;

  b2Mat33 = Box2D.Common.Math.b2Mat33;

  b2Math = Box2D.Common.Math.b2Math;

  b2Sweep = Box2D.Common.Math.b2Sweep;

  b2Transform = Box2D.Common.Math.b2Transform;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2Vec3 = Box2D.Common.Math.b2Vec3;

  b2Color = Box2D.Common.b2Color;

  b2internal = Box2D.Common.b2internal;

  b2Settings = Box2D.Common.b2Settings;

  b2AABB = Box2D.Collision.b2AABB;

  b2Bound = Box2D.Collision.b2Bound;

  b2BoundValues = Box2D.Collision.b2BoundValues;

  b2Collision = Box2D.Collision.b2Collision;

  b2ContactID = Box2D.Collision.b2ContactID;

  b2ContactPoint = Box2D.Collision.b2ContactPoint;

  b2Distance = Box2D.Collision.b2Distance;

  b2DistanceInput = Box2D.Collision.b2DistanceInput;

  b2DistanceOutput = Box2D.Collision.b2DistanceOutput;

  b2DistanceProxy = Box2D.Collision.b2DistanceProxy;

  b2DynamicTree = Box2D.Collision.b2DynamicTree;

  b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase;

  b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode;

  b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair;

  b2Manifold = Box2D.Collision.b2Manifold;

  b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint;

  b2Point = Box2D.Collision.b2Point;

  b2RayCastInput = Box2D.Collision.b2RayCastInput;

  b2RayCastOutput = Box2D.Collision.b2RayCastOutput;

  b2Segment = Box2D.Collision.b2Segment;

  b2SeparationFunction = Box2D.Collision.b2SeparationFunction;

  b2Simplex = Box2D.Collision.b2Simplex;

  b2SimplexCache = Box2D.Collision.b2SimplexCache;

  b2SimplexVertex = Box2D.Collision.b2SimplexVertex;

  b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact;

  b2TOIInput = Box2D.Collision.b2TOIInput;

  b2WorldManifold = Box2D.Collision.b2WorldManifold;

  ClipVertex = Box2D.Collision.ClipVertex;

  Features = Box2D.Collision.Features;

  IBroadPhase = Box2D.Collision.IBroadPhase;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef;

  b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2Shape = Box2D.Collision.Shapes.b2Shape;

  b2Body = Box2D.Dynamics.b2Body;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2ContactFilter = Box2D.Dynamics.b2ContactFilter;

  b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse;

  b2ContactListener = Box2D.Dynamics.b2ContactListener;

  b2ContactManager = Box2D.Dynamics.b2ContactManager;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2DestructionListener = Box2D.Dynamics.b2DestructionListener;

  b2FilterData = Box2D.Dynamics.b2FilterData;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Island = Box2D.Dynamics.b2Island;

  b2TimeStep = Box2D.Dynamics.b2TimeStep;

  b2World = Box2D.Dynamics.b2World;

  b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact;

  b2Contact = Box2D.Dynamics.Contacts.b2Contact;

  b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint;

  b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint;

  b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge;

  b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory;

  b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister;

  b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult;

  b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver;

  b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact;

  b2NullContact = Box2D.Dynamics.Contacts.b2NullContact;

  b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact;

  b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact;

  b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact;

  b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold;

  b2Controller = Box2D.Dynamics.Controllers.b2Controller;

  b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint;

  b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef;

  b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint;

  b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef;

  b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint;

  b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef;

  b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian;

  b2Joint = Box2D.Dynamics.Joints.b2Joint;

  b2JointDef = Box2D.Dynamics.Joints.b2JointDef;

  b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge;

  b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint;

  b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef;

  b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint;

  b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

  b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint;

  b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint;

  b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef;

  b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint;

  b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef;

  console.log(Box2D);

  Box2D.Common.Math.b2Vec2.prototype.to = function(that) {
    var vec;
    vec = that.Copy();
    vec.Subtract(this);
    return vec;
  };

  Box2D.Common.Math.b2Vec2.prototype.multiply = function(scale) {
    this.x = this.x * scale;
    return this.y = this.y * scale;
  };

  Box2D.Common.Math.b2Vec2.prototype.divide = function(scale) {
    this.x = this.x / scale;
    return this.y = this.y / scale;
  };

  Box2D.Common.Math.b2Vec2.prototype.closer_to = function(that, n) {
    var t1;
    t1 = this.to(that);
    t1.Normalize();
    t1.Multiply(n);
    t1.Add(this);
    return t1;
  };

  Box2D.Common.Math.b2Vec2.prototype.dot = function(vec) {
    return console.log("calculate dot product");
  };

  Box2D.Common.Math.b2Vec2.prototype.proj = function(vec) {
    return console.log("calculate projection vector");
  };

  Box2D.Common.Math.b2Vec2.prototype.cross = function(vec) {
    return console.log("calculate cross project");
  };

  Box2D.Common.Math.b2Vec2.prototype.angle = function() {
    return Math.atan2(this.y, this.x);
  };

  Box2D.Common.Math.b2Vec2.prototype.angle_between = function(vec) {
    console.log("calculate angle between");
    return self.dot(vec) / (vec.Length * self.Length);
  };

  Physics = (function() {

    Physics.prototype.world = null;

    Physics.prototype.fix_def = null;

    Physics.prototype.solid = null;

    Physics.prototype.PTM = 16;

    function Physics() {
      var solid_def;
      this.fix_def = new b2FixtureDef;
      this.fix_def.density = 1.0;
      this.fix_def.friction = 0.5;
      this.fix_def.restitution = 0.2;
      this.create_world();
      this.setup_debug_draw();
      solid_def = new b2BodyDef();
      solid_def.position.Set(0, 0);
      this.solid = this.world.CreateBody(solid_def);
      this.build_edges();
      this.build_boxes();
    }

    Physics.prototype.create_world = function() {
      return this.world = new b2World(new b2Vec2(0.0, 60.0), true);
    };

    Physics.prototype.setup_debug_draw = function() {
      var debugDraw;
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(Game.context);
      debugDraw.SetDrawScale(this.PTM);
      debugDraw.SetFillAlpha(0.5);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit);
      return this.world.SetDebugDraw(debugDraw);
    };

    Physics.prototype.build_edges = function() {
      this.build_solid_line(0, 0, AppData.width, 0);
      this.build_solid_line(0, AppData.height, AppData.width, AppData.height);
      this.build_solid_line(0, 0, 0, AppData.height);
      return this.build_solid_line(AppData.width, 0, AppData.width, AppData.height);
    };

    Physics.prototype.build_boxes = function() {
      this.build_solid_box(32, 32, 32, 32, 45);
      this.build_solid_box(64, 128, 16, 64, 0);
      this.build_solid_box(232, 62, 132, 8, 10);
      return this.build_solid_circle(200, 90, 22);
    };

    Physics.prototype.build_solid_line = function(x1, y1, x2, y2) {
      this.fix_def.shape = new b2PolygonShape;
      this.fix_def.shape.SetAsEdge(new b2Vec2(x1 / this.PTM, y1 / this.PTM), new b2Vec2(x2 / this.PTM, y2 / this.PTM));
      return this.solid.CreateFixture(this.fix_def);
    };

    Physics.prototype.build_solid_box = function(x, y, w, h, rotation) {
      this.fix_def.shape = new b2PolygonShape;
      this.fix_def.shape.SetAsOrientedBox(w / this.PTM / 2, h / this.PTM / 2, new b2Vec2(x / this.PTM, y / this.PTM), -rotation / 180 * Math.PI);
      return this.solid.CreateFixture(this.fix_def);
    };

    Physics.prototype.build_solid_circle = function(x, y, r) {
      this.fix_def.shape = new b2CircleShape;
      this.fix_def.shape.SetRadius(r / this.PTM);
      console.log(this.fix_def.shape);
      this.fix_def.shape.m_p = new b2Vec2(x / this.PTM, y / this.PTM);
      return this.solid.CreateFixture(this.fix_def);
    };

    Physics.prototype.build_dynamic = function(x, y, w, h, physics) {
      var bd, body, fd, shape;
      bd = new b2BodyDef();
      bd.type = b2Body.b2_dynamicBody;
      bd.position.Set(x / this.PTM, y / this.PTM);
      if (physics.shape === 'circle') {
        shape = new b2CircleShape();
        shape.SetRadius(Math.max(w, h) / this.PTM / 2);
      } else {
        shape = new b2PolygonShape();
        shape.SetAsBox(w / this.PTM / 2, h / this.PTM / 2);
      }
      fd = new b2FixtureDef();
      fd.shape = shape;
      fd.density = physics.density;
      fd.friction = physics.friction;
      fd.restitution = physics.restitution;
      body = this.world.CreateBody(bd);
      body.CreateFixture(fd);
      return body;
    };

    Physics.prototype.draw = function(x, y) {
      Game.context.save();
      Game.context.translate(x, y);
      this.world.DrawDebugData();
      return Game.context.restore();
    };

    return Physics;

  })();

  Sprite = (function() {

    Sprite.prototype.x = 0;

    Sprite.prototype.y = 0;

    Sprite.prototype.visible = true;

    Sprite.prototype.scale_x = 1;

    Sprite.prototype.scale_y = 1;

    Sprite.prototype.alpha = 1;

    Sprite.prototype.rotation = 0;

    Sprite.prototype.index = 1;

    Sprite.prototype.z = 0;

    Sprite.prototype.name = null;

    function Sprite(name, x, y) {
      if (name == null) {
        name = 'PlaceHolder';
      }
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this.name = name;
      this.x = x;
      this.y = y;
    }

    Sprite.prototype.draw = function() {
      var image, x, y;
      image = this._get_image();
      x = this.x - image.width / 2;
      y = this.y - image.height / 2;
      if (this.rotation === 0 && this.scale_x === 1 && this.scale_y === 1) {
        return Game.context.drawImage(image, 0, 0, image.width, image.height, x, y, image.width, image.height);
      } else {
        Game.context.save();
        Game.context.translate(x + image.width / 2, y + image.height / 2);
        Game.context.scale(this.scale_x, this.scale_y);
        Game.context.rotate(Math.PI / 180 * (0 - this.rotation));
        Game.context.drawImage(image, 0, 0, image.width, image.height, -image.width / 2, -image.height / 2, image.width, image.height);
        return Game.context.restore();
      }
    };

    Sprite.prototype._get_image = function() {
      var result;
      if (this.index !== 1) {
        result = Game.images[this.name + this.index];
      } else {
        result = Game.images[this.name];
      }
      if (!result) {
        console.log("" + name + " not found.");
        result = Game.images['PlaceHolder'];
      }
      return result;
    };

    return Sprite;

  })();

  Text = (function() {

    Text.prototype.x = 0;

    Text.prototype.y = 0;

    Text.prototype.visible = true;

    Text.prototype.scale_x = 1;

    Text.prototype.scale_y = 1;

    Text.prototype.alpha = 1;

    Text.prototype.rotation = 0;

    Text.prototype.index = 1;

    Text.prototype.align = 'center';

    Text.prototype.z = 0;

    Text.prototype.name = null;

    Text.prototype.font = 'Dosis';

    Text.prototype.font_size = 16;

    Text.prototype.font_style = "";

    Text.prototype.string = '';

    function Text(string, x, y) {
      if (string == null) {
        string = '';
      }
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this.string = string;
      this.x = x;
      this.y = y;
    }

    Text.prototype.draw = function(string, x, y) {
      if (string == null) {
        string = '';
      }
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this._update();
      if (this.rotation !== 0) {
        Game.context.save();
        Game.context.translate(this.x + get_width() / 2, this.y + this.get_height() / 2);
        Game.context.rotate(Math.PI / 180 * this.rotation);
        Game.context.fillText(this.string, -this.get_width() / 2, -this.get_height() / 2);
        return Game.context.restore();
      } else {
        return Game.context.fillText(this.string, this.x, this.y);
      }
    };

    Text.prototype.get_width = function() {
      this._update();
      return Game.context.measureText(this.string).width;
    };

    Text.prototype.get_height = function() {
      return this.font_size;
    };

    Text.prototype._update = function() {
      Game.context.font = this.font_style + " " + this.font_size + " " + this.font;
      return Game.context.textAlign = this.align;
    };

    return Text;

  })();

  Array.prototype.remove = function(e) {
    var t, _ref;
    if ((t = this.indexOf(e)) > -1) {
      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
    }
  };

  Array.prototype.diff = function(a) {
    return this.filter(function(i) {
      return !(a.indexOf(i) > -1);
    });
  };

  Array.prototype.copy = function() {
    return this.slice(0);
  };

  Math.sign = function(n) {
    return (n > 0 ? 1 : (n < 0 ? -1 : 0));
  };

  Array.prototype.unique = function() {
    return this.sort().filter(function(v, i, o) {
      if (i && v !== o[i - 1]) {
        return v;
      } else {
        return 0;
      }
    });
  };

  Array.prototype.deepToString = function() {
    var i, result, _i, _ref;
    result = "[";
    for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (Object.prototype.toString.call(this[i]) === "[object Array]") {
        result += this[i].deepToString();
      } else if (this[i]) {
        result += this[i];
      }
      if (i !== this.length - 1) {
        result += ",";
      }
    }
    return result + "]";
  };

  Audio.muted = false;

  Audio.prototype.go = function() {
    if (Audio.muted === false) {
      return this.play();
    }
  };

  World = (function() {

    World.prototype._entities = [];

    World.prototype._entities_to_destroy = [];

    World.prototype.x = 0;

    World.prototype.y = 0;

    World.prototype.pause = false;

    World.prototype.physics = null;

    World.prototype.art = null;

    function World() {
      if (AppData.physics) {
        this.physics = new Physics;
      }
      this.art = new Art(this);
    }

    World.prototype.load_level = function(name) {
      var key, level, value, _ref, _results;
      level = AppData.levels[name];
      _ref = level.data;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this.spawn(value.name, value.x, value.y));
      }
      return _results;
    };

    World.prototype.destroy_all = function() {
      var e, temp, _i, _len, _results;
      temp = this._entities.slice(0);
      _results = [];
      for (_i = 0, _len = temp.length; _i < _len; _i++) {
        e = temp[_i];
        _results.push(this._entities.remove(e));
      }
      return _results;
    };

    World.prototype.reset = function() {
      this.destroy_all();
      return this.load_level('Level');
    };

    World.prototype.all_entities = function() {
      return this._entities;
    };

    World.prototype.destroy = function(entity) {
      return this._entities_to_destroy.push(entity);
    };

    World.prototype._remove_destroyed = function() {
      var e, _i, _len, _ref;
      _ref = this._entities_to_destroy;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        this._entities.remove(e);
      }
      return this._entities_to_destroy = [];
    };

    World.prototype.spawn = function(name, x, y) {
      var cl, entity;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      cl = AppData.entities[name];
      if (!cl) {
        console.log("Error: " + name + " not found");
      }
      entity = new cl;
      entity.world = this;
      entity.sx = x;
      entity.sy = y;
      if (entity.name === null) {
        entity.name = name;
      }
      if (entity.sprite === null) {
        entity.sprite = new Sprite;
        if (!Game.images[name]) {
          name = 'PlaceHolder';
        }
        entity.sprite.name = name;
        entity.w = Game.images[name].width;
        entity.h = Game.images[name].height;
        entity.r = (entity.w + entity.h) / 4;
      }
      entity.art = this.art;
      if (AppData.physics) {
        if (entity.physics) {
          entity.body = this.physics.build_dynamic(x, y, entity.w, entity.h, entity.physics);
        }
      }
      this._entities.push(entity);
      entity.reset();
      entity.init();
      return entity;
    };

    World.prototype.objects_of_class = function(c) {
      var entity, res, _i, _len, _ref;
      res = [];
      _ref = this._entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.name === c) {
          res.push(entity);
        }
      }
      return res;
    };

    World.prototype.number_of = function(c) {
      return this.objects_of_class(c).length;
    };

    World.prototype.exists = function(c) {
      return this.number_of(c) > 0;
    };

    World.prototype.draw = function() {
      var entity, _i, _len, _ref, _results;
      this.art.color('#EFF8FB');
      this.art.rectangleC(0, 0, AppData.width * AppData.scale / Game.zoom_level, AppData.height * AppData.scale / Game.zoom_level, true);
      this.art.color('#000000');
      if (this.physics) {
        this.physics.draw(this.x, this.y);
      }
      this._entities.sort(function(a, b) {
        if (Math.sign(a.z - b.z) === 0) {
          return Math.sign(a.y - b.y);
        } else {
          return Math.sign(a.z - b.z);
        }
      });
      _ref = this._entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.draw());
      }
      return _results;
    };

    World.prototype.step = function() {
      var entity, _i, _len, _ref;
      Keyboard.step();
      if (this.pause === false) {
        this.physics.world.Step(1 / 120, 3, 2);
        _ref = this._entities;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          if (typeof entity.step === "function") {
            entity.step();
          }
        }
      }
      return this._remove_destroyed();
    };

    return World;

  })();

  Block = (function(_super) {

    __extends(Block, _super);

    function Block() {
      return Block.__super__.constructor.apply(this, arguments);
    }

    return Block;

  })(Entity);

  Bullet = (function(_super) {

    __extends(Bullet, _super);

    function Bullet() {
      return Bullet.__super__.constructor.apply(this, arguments);
    }

    Bullet.prototype.direction = 0;

    Bullet.prototype.speed = 10;

    Bullet.prototype.step = function() {
      this.x += Math.cos(this.direction / 180 * Math.PI) * this.speed;
      return this.y -= Math.sin(this.direction / 180 * Math.PI) * this.speed;
    };

    return Bullet;

  })(Entity);

  Domino = (function(_super) {

    __extends(Domino, _super);

    function Domino() {
      return Domino.__super__.constructor.apply(this, arguments);
    }

    Domino.prototype.physics = {
      shape: 'rectangle',
      friction: 0.25
    };

    Domino.prototype.body = null;

    Domino.prototype.step = function() {
      var angle, position;
      angle = this.body.angle;
      position = this.body.GetPosition();
      console.log(this.body);
      this.x = position.x * 16;
      this.y = position.y * 16;
      return this.sprite.rotation = -angle / (Math.PI * 2) * 360;
    };

    return Domino;

  })(Entity);

  Explosion = (function(_super) {

    __extends(Explosion, _super);

    function Explosion() {
      return Explosion.__super__.constructor.apply(this, arguments);
    }

    Explosion.prototype.time = 0;

    Explosion.prototype.step = function() {
      this.time += 1;
      this.index = 1 + this.time;
      if (this.time > 3) {
        return this.destroy();
      }
    };

    return Explosion;

  })(Entity);

  Fireball = (function(_super) {

    __extends(Fireball, _super);

    function Fireball() {
      return Fireball.__super__.constructor.apply(this, arguments);
    }

    Fireball.prototype.time = 0;

    Fireball.prototype.step = function() {
      this.time += 1;
      this.x += Math.cos(this.direction / 180 * Math.PI) * 5;
      this.y -= Math.sin(this.direction / 180 * Math.PI) * 5;
      if (this.time > 15) {
        this.world.spawn('Explosion', this.x, this.y);
        return this.destroy();
      }
    };

    Fireball.prototype.draw = function() {
      this.sprite.index = 1 + this.direction / 45;
      return Fireball.__super__.draw.apply(this, arguments);
    };

    return Fireball;

  })(Entity);

  GameController = (function(_super) {

    __extends(GameController, _super);

    function GameController() {
      return GameController.__super__.constructor.apply(this, arguments);
    }

    GameController.score = 0;

    GameController.prototype.text = null;

    GameController.prototype.world = null;

    GameController.prototype.date = 0;

    GameController.prototype.init = function() {
      this.text = new Text('10', 10, 10);
      return this.text.align = 'left';
    };

    GameController.prototype.draw = function() {
      var sec, tmp_date;
      tmp_date = new Date;
      sec = tmp_date - this.date;
      this.date = tmp_date;
      this.text.string = sec;
      return this.text.draw();
    };

    return GameController;

  })(Entity);

  Hero = (function(_super) {

    __extends(Hero, _super);

    function Hero() {
      return Hero.__super__.constructor.apply(this, arguments);
    }

    Hero.prototype.direction = 0;

    Hero.prototype.move = 'WALKING';

    Hero.prototype.animation = 0;

    Hero.prototype.init = function() {};

    Hero.prototype.step = function() {
      var f, face_x, face_y, fireball_sound;
      face_x = 0;
      face_y = 0;
      if (Keyboard.hold('RIGHT')) {
        face_x += 1;
      }
      if (Keyboard.hold('LEFT')) {
        face_x -= 1;
      }
      if (Keyboard.hold('UP')) {
        face_y -= 1;
      }
      if (Keyboard.hold('DOWN')) {
        face_y += 1;
      }
      this.move = 'WALKING';
      if (face_x === -1) {
        if (face_y === -1) {
          this.direction = 90 + 45;
        }
        if (face_y === 0) {
          this.direction = 180;
        }
        if (face_y === 1) {
          this.direction = 180 + 45;
        }
      }
      if (face_x === 0) {
        if (face_y === -1) {
          this.direction = 90;
        }
        if (face_y === 0) {
          this.move = 'STANDING';
        }
        if (face_y === 1) {
          this.direction = 270;
        }
      }
      if (face_x === 1) {
        if (face_y === -1) {
          this.direction = 45;
        }
        if (face_y === 0) {
          this.direction = 0;
        }
        if (face_y === 1) {
          this.direction = 270 + 45;
        }
      }
      this.sprite.scale_x = 1;
      if (this.direction === 0) {
        this.sprite.index = 5;
      }
      if (this.direction === 45) {
        this.sprite.index = 7;
      }
      if (this.direction === 90) {
        this.sprite.index = 9;
      }
      if (this.direction === 90 + 45) {
        this.sprite.index = 7;
        this.sprite.scale_x = -1;
      }
      if (this.direction === 180) {
        this.sprite.index = 5;
        this.sprite.scale_x = -1;
      }
      if (this.direction === 180 + 45) {
        this.sprite.index = 3;
        this.sprite.scale_x = -1;
      }
      if (this.direction === 270) {
        this.sprite.index = 1;
      }
      if (this.direction === 270 + 45) {
        this.sprite.index = 3;
      }
      if (this.animation > 20) {
        this.animation = 0;
      }
      if (this.animation > 10) {
        this.sprite.index += 1;
      }
      if (this.move === 'WALKING') {
        this.animation += 1;
        this.x += Math.cos(this.direction / 180 * Math.PI);
        this.y -= Math.sin(this.direction / 180 * Math.PI);
        if (this.hit('Block')) {
          console.log('block');
          this.x -= Math.cos(this.direction / 180 * Math.PI);
          this.y += Math.sin(this.direction / 180 * Math.PI);
        }
      }
      if (Keyboard.press('X')) {
        fireball_sound = new Audio('sounds/shotgun.wav');
        fireball_sound.go();
        f = this.world.spawn('Fireball', this.x, this.y);
        f.direction = this.direction;
      }
      this.world.x = this.x - AppData.width / 2;
      return this.world.y = this.y - AppData.height / 2;
    };

    return Hero;

  })(Entity);

  Pendulum = (function(_super) {

    __extends(Pendulum, _super);

    function Pendulum() {
      return Pendulum.__super__.constructor.apply(this, arguments);
    }

    Pendulum.prototype.physics = {
      shape: 'circle',
      friction: 0.25,
      density: 35,
      restitution: 0.95
    };

    Pendulum.prototype.body = null;

    Pendulum.prototype.speed = 2;

    Pendulum.prototype.jump_power = 800;

    Pendulum.prototype.crawl_speed = 0.1;

    Pendulum.prototype.joint_last_angle = 90;

    Pendulum.prototype.aim = 20;

    Pendulum.prototype.rope = [];

    Pendulum.prototype.rope_precision = 4;

    Pendulum.prototype.joint = null;

    Pendulum.prototype.bullet = null;

    Pendulum.prototype.dis_joint = function(p) {
      var jointDef;
      p = p.Copy();
      p.divide(16);
      jointDef = new b2DistanceJointDef();
      jointDef.Initialize(this.world.physics.solid, this.body, p, this.body.GetWorldCenter());
      jointDef.collideConnected = true;
      return this.joint = this.world.physics.world.CreateJoint(jointDef);
    };

    Pendulum.prototype.dis_joint_off = function() {
      var vec;
      vec = this.joint.GetAnchorB().Copy();
      vec.Subtract(this.joint.GetAnchorA());
      this.joint_last_angle = vec.angle() / (Math.PI * 2) * 360;
      this.world.physics.world.DestroyJoint(this.joint);
      return this.joint = null;
    };

    Pendulum.prototype.ray_shoot = function(p) {
      var b, f, input, output, x2, y2;
      input = new b2RayCastInput(new b2Vec2(this.x / 16, this.y / 16), new b2Vec2(p.x / 16, p.y / 16));
      output = new b2RayCastOutput();
      b = this.world.physics.world.GetBodyList();
      while (b) {
        f = b.GetFixtureList();
        while (f) {
          if (f.RayCast(output, input, b.GetTransform())) {
            p = input.p1.to(input.p2);
            x2 = this.x + p.x * 16 * output.fraction;
            y2 = this.y + p.y * 16 * output.fraction;
            return new b2Vec2(x2, y2);
          }
          f = f.GetNext();
        }
        b = b.GetNext();
      }
    };

    Pendulum.prototype.triangle_check = function(p1, p2, p3) {
      var b, center, f;
      b = this.world.physics.world.GetBodyList();
      while (b) {
        f = b.GetFixtureList();
        while (f) {
          center = f.GetShape().m_centroid;
          if (center) {
            if (this.in_triangle(new b2Vec2(center.x * 16, center.y * 16), p1, p2, p3)) {
              return true;
            }
          }
          f = f.GetNext();
        }
        b = b.GetNext();
      }
      return false;
    };

    Pendulum.prototype.in_triangle = function(p, p1, p2, p3) {
      var alpha, beta, gamma;
      alpha = ((p2.y - p3.y) * (p.x - p3.x) + (p3.x - p2.x) * (p.y - p3.y)) / ((p2.y - p3.y) * (p1.x - p3.x) + (p3.x - p2.x) * (p1.y - p3.y));
      beta = ((p3.y - p1.y) * (p.x - p3.x) + (p1.x - p3.x) * (p.y - p3.y)) / ((p2.y - p3.y) * (p1.x - p3.x) + (p3.x - p2.x) * (p1.y - p3.y));
      gamma = 1 - alpha - beta;
      return alpha > 0 && beta > 0 && gamma > 0;
    };

    Pendulum.prototype.step = function() {
      var dir, hit, p, t0, t1, t2;
      if (Keyboard.release('SPACE')) {
        if (!this.bullet) {
          if (this.joint) {
            this.dis_joint_off();
            this.rope = [];
          }
        }
        if (this.bullet) {
          this.bullet.destroy();
          this.bullet = null;
          this.rope.length = 1;
        }
      }
      if (Keyboard.press('SPACE')) {
        if (!this.bullet && !this.joint) {
          this.bullet = this.spawn('Bullet', this.x, this.y);
          dir = (this.joint_last_angle + 360) % 360;
          if (dir < this.aim) {
            dir = this.aim;
          } else if (dir > 270) {
            dir = this.aim;
          } else if (dir > 180 - this.aim) {
            dir = 180 - this.aim;
          }
          this.bullet.direction = dir;
        }
      }
      if (this.joint) {
        if (Keyboard.hold('LEFT')) {
          this.body.ApplyImpulse(new b2Vec2(-this.speed, 0), this.body.GetWorldCenter());
        }
        if (Keyboard.hold('RIGHT')) {
          this.body.ApplyImpulse(new b2Vec2(this.speed, 0), this.body.GetWorldCenter());
        }
        if (Keyboard.hold('DOWN')) {
          this.joint.SetLength(this.joint.GetLength() + this.crawl_speed);
        }
        if (Keyboard.hold('UP')) {
          if (this.joint.GetLength() > 0.3) {
            this.joint.SetLength(this.joint.GetLength() - this.crawl_speed);
          }
        }
      }
      p = this.body.GetPosition();
      this.x = p.x * 16;
      this.y = p.y * 16;
      this.sprite.rotation = -this.body.GetAngle() / (Math.PI * 2) * 360;
      if (this.bullet) {
        this.rope[0] = new b2Vec2(this.bullet.x, this.bullet.y);
        this.rope.length = 2;
        if (hit = this.ray_shoot(this.rope[0])) {
          this.bullet.destroy();
          this.bullet = null;
          this.dis_joint(hit);
          this.rope[0] = new b2Vec2(hit.x, hit.y);
        }
      }
      if (this.joint) {
        t0 = new b2Vec2(this.x, this.y);
        t1 = this.rope[this.rope.length - 2].closer_to(t0, this.rope_precision);
        if (hit = this.ray_shoot(t1)) {
          this.rope[this.rope.length - 1] = hit;
          this.rope.length += 1;
          this.world.physics.world.DestroyJoint(this.joint);
          this.joint = null;
          this.dis_joint(hit);
        }
        if (this.rope.length > 2) {
          t2 = this.rope[this.rope.length - 3].closer_to(t0, this.rope_precision);
          if (!(hit = this.ray_shoot(t2))) {
            if (!this.triangle_check(t0, t1, t2)) {
              this.rope.pop();
              this.world.physics.world.DestroyJoint(this.joint);
              this.joint = null;
              return this.dis_joint(this.rope[this.rope.length - 2]);
            }
          }
        }
      }
    };

    Pendulum.prototype.draw = function() {
      var i, knot, pknot, _i, _ref, _results;
      this.rope[this.rope.length - 1] = new b2Vec2(this.x, this.y);
      _results = [];
      for (i = _i = 0, _ref = this.rope.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        knot = this.rope[i];
        if (knot) {
          if (i > 0) {
            this.art.line(pknot.x, pknot.y, knot.x, knot.y);
          }
          _results.push(pknot = knot);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Pendulum.prototype.destroy = function() {
      this.world.physics.world.DestroyBody(this.body);
      return Pendulum.__super__.destroy.call(this);
    };

    return Pendulum;

  })(Entity);

  Level = (function() {

    function Level() {}

    Level.data = {
      1: {
        name: 'GameController',
        x: 0,
        y: 0
      },
      2: {
        name: 'Pendulum',
        x: 242.5,
        y: 100.5
      }
    };

    return Level;

  })();

  Level2 = (function() {

    function Level2() {}

    return Level2;

  })();

  Builder = (function() {

    Builder.prototype.active = true;

    Builder.prototype.hold = false;

    Builder.prototype.entity = null;

    Builder.prototype.world = null;

    Builder.prototype.grid = null;

    Builder.prototype.editor = null;

    function Builder(editor) {
      this.editor = editor;
      this.world = Game.worlds[0];
    }

    Builder.prototype.output_level = function(name) {
      var e, i, level, n, txt, _i;
      txt = "class " + name + "\n  @data:\n";
      level = AppData.levels[name];
      n = Object.keys(level.data).length;
      for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
        e = level.data[i];
        txt += "    " + i + ":\n";
        txt += "      name: '" + e.name + "'\n";
        txt += "      x: " + e.x + "\n";
        txt += "      y: " + e.y + "\n";
      }
      return txt;
    };

    Builder.prototype.save_level = function(name) {
      var e, i, level, o, _i, _len, _ref, _results;
      i = 1;
      level = AppData.levels[name];
      level.data = new Object();
      _ref = this.world.all_entities();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        o = new Object();
        o.name = e.name;
        o.x = e.sx;
        o.y = e.sy;
        level.data[i] = o;
        _results.push(i += 1);
      }
      return _results;
    };

    Builder.prototype.step = function() {
      var e, temp_all_entities, _i, _len;
      if (!this.grid) {
        this.grid = Game.editor.grid;
      }
      if (!this.active) {
        return;
      }
      if (!Game.pause) {
        return;
      }
      if (Keyboard.press('MOUSE_LEFT')) {
        this.hold = this.world.spawn(this.entity, Keyboard.MOUSE_X, Keyboard.MOUSE_Y);
      }
      if (this.hold) {
        this.hold.x = Keyboard.MOUSE_X;
        this.hold.y = Keyboard.MOUSE_Y;
        if (Keyboard.hold('SHIFT') && this.grid) {
          this.hold.x = this.hold.x - this.hold.x % this.grid.width + this.grid.width / 2;
          this.hold.y = this.hold.y - this.hold.y % this.grid.height + this.grid.height / 2;
        }
        this.hold.sx = this.hold.x;
        this.hold.sy = this.hold.y;
      }
      if (Keyboard.release('MOUSE_LEFT')) {
        this.save_level(this.editor.level);
        this.hold = null;
      }
      if (Keyboard.hold('MOUSE_RIGHT')) {
        temp_all_entities = this.world.all_entities().slice(0);
        for (_i = 0, _len = temp_all_entities.length; _i < _len; _i++) {
          e = temp_all_entities[_i];
          if (e.mouse_hits()) {
            e.destroy();
          }
        }
        return this.save_level(this.editor.level);
      }
    };

    return Builder;

  })();

  Editor = (function() {

    Editor.prototype.grid = null;

    Editor.prototype.builder = null;

    Editor.prototype.world = null;

    Editor.prototype.level = '';

    Editor.prototype.entity_selector = null;

    Editor.prototype.pause_button = null;

    Editor.prototype.grid_x = null;

    Editor.prototype.grid_y = null;

    Editor.prototype.grid_width = null;

    Editor.prototype.grid_height = null;

    Editor.prototype.grid_toggle = null;

    function Editor(world) {
      this.set_pause = __bind(this.set_pause, this);

      this.toggle_pause = __bind(this.toggle_pause, this);

      this.toggle_grid = __bind(this.toggle_grid, this);

      this.grid_move = __bind(this.grid_move, this);

      this.entity_change = __bind(this.entity_change, this);

      this.save = __bind(this.save, this);

      this.debug_draw_change = __bind(this.debug_draw_change, this);

      this.save_type_change = __bind(this.save_type_change, this);

      this.level_change = __bind(this.level_change, this);
      this.world = world;
      this.builder = new Builder(this);
      this.grid = new Grid;
      this.level_selector = document.getElementById("level_selector");
      this.level_selector.addEventListener("change", this.level_change, false);
      this.level_change();
      this.save_type_selector = document.getElementById("save_type_selector");
      this.save_type_selector.addEventListener("change", this.save_type_change, false);
      this.save_button = document.getElementById("save_button");
      this.save_button.addEventListener("click", this.save, false);
      this.entity_selector = document.getElementById("entity_selector");
      this.entity_selector.addEventListener("change", this.entity_change, false);
      this.entity_change();
      this.pause_button = document.getElementById("pause_toggle");
      this.pause_button.addEventListener("click", this.toggle_pause, false);
      this.pause_button.addEventListener("click", this.entity_change, false);
      this.debug_draw_selector = document.getElementById("debug_draw_selector");
      this.debug_draw_selector.addEventListener("change", this.debug_draw_change, false);
      this.grid_x = document.getElementById("grid_x");
      this.grid_y = document.getElementById("grid_y");
      this.grid_width = document.getElementById("grid_width");
      this.grid_height = document.getElementById("grid_height");
      this.grid_toggle = document.getElementById("grid_toggle");
      this.grid_x.addEventListener("change", this.grid_move, false);
      this.grid_y.addEventListener("change", this.grid_move, false);
      this.grid_width.addEventListener("change", this.grid_move, false);
      this.grid_height.addEventListener("change", this.grid_move, false);
      this.grid_toggle.addEventListener("click", this.toggle_grid, false);
    }

    Editor.prototype.step = function() {
      return this.builder.step();
    };

    Editor.prototype.level_change = function() {
      this.level = this.level_selector.value;
      console.log(this.level);
      this.world.destroy_all();
      return this.world.load_level(this.level);
    };

    Editor.prototype.save_type_change = function() {
      return this.builder.save_type = this.save_type_selector.value;
    };

    Editor.prototype.debug_draw_change = function() {
      return this.world.physics.set_debug_draw(this.debug_draw_selector.value);
    };

    Editor.prototype.save = function() {
      var blob, level, txt;
      level = this.level_selector.value;
      txt = this.builder.output_level(level);
      blob = new Blob([txt], {
        type: 'text/html'
      });
      return saveAs(blob, "" + level + ".coffee");
    };

    Editor.prototype.entity_change = function() {
      return this.builder.entity = this.entity_selector.value;
    };

    Editor.prototype.grid_move = function() {
      this.grid.x = parseInt(this.grid_x.value);
      this.grid.y = parseInt(this.grid_y.value);
      this.grid.width = parseInt(this.grid_width.value);
      return this.grid.height = parseInt(this.grid_height.value);
    };

    Editor.prototype.toggle_grid = function() {
      console.log('e');
      if (this.grid.visible) {
        return this.grid.visible = false;
      } else {
        return this.grid.visible = true;
      }
    };

    Editor.prototype.toggle_pause = function() {
      return this.set_pause(!Game.pause);
    };

    Editor.prototype.set_pause = function(pause) {
      var world, _i, _len, _ref, _results;
      Game.pause = pause;
      if (pause) {
        this.pause_button.innerHTML = 'Play';
      } else {
        this.pause_button.innerHTML = 'Pause';
      }
      _ref = Game.worlds;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        world = _ref[_i];
        _results.push(world.pause = Game.pause);
      }
      return _results;
    };

    Editor.prototype.draw = function() {
      return this.grid.draw();
    };

    return Editor;

  })();

  Grid = (function() {

    Grid.prototype.sx = 0;

    Grid.prototype.sy = 0;

    Grid.prototype.visible = false;

    Grid.prototype.x = 0;

    Grid.prototype.y = 0;

    Grid.prototype.width = 16;

    Grid.prototype.height = 16;

    Grid.prototype.world_x = 0;

    Grid.prototype.world_y = 0;

    function Grid() {
      this.visible = AppData.grid_on;
    }

    Grid.prototype.draw = function() {
      var i, line_x_n, line_y_n, x, y, _i, _j;
      if (this.visible && this.height > 1 && this.width > 1) {
        Art.stroke_color('Gray');
        Art.alpha(0.5);
        line_x_n = AppData.width / this.width;
        line_y_n = AppData.height / this.height;
        for (i = _i = 0; 0 <= line_x_n ? _i < line_x_n : _i > line_x_n; i = 0 <= line_x_n ? ++_i : --_i) {
          x = this.x + i * this.width;
          Art.lineC(x, this.y, x, this.y + line_y_n * this.height);
        }
        for (i = _j = 0; 0 <= line_y_n ? _j < line_y_n : _j > line_y_n; i = 0 <= line_y_n ? ++_j : --_j) {
          y = this.y + i * this.height;
          Art.lineC(this.x, y, this.x + line_x_n * this.width, y);
        }
        return Art.alpha(1);
      }
    };

    return Grid;

  })();

  window.onload = function() {
    return Game.init('build');
  };

  AppData = (function() {

    function AppData() {}

    AppData.game_name = "template";

    AppData.width = 360;

    AppData.height = 240;

    AppData.scale = 2;

    AppData.grid_on = false;

    AppData.physics = true;

    AppData.physics_pixel_per_meter = 16;

    AppData.entities = {
      'Block': Block,
      'Bullet': Bullet,
      'Domino': Domino,
      'Explosion': Explosion,
      'Fireball': Fireball,
      'GameController': GameController,
      'Hero': Hero,
      'Pendulum': Pendulum
    };

    AppData.sprites = {
      'Block': 'Block.png',
      'Block16': 'Block16.png',
      'Bullet': 'Bullet.png',
      'Explosion': 'Explosion.png',
      'Explosion2': 'Explosion2.png',
      'Explosion3': 'Explosion3.png',
      'Explosion4': 'Explosion4.png',
      'Fireball': 'Fireball.png',
      'Fireball2': 'Fireball2.png',
      'Fireball3': 'Fireball3.png',
      'Fireball4': 'Fireball4.png',
      'Fireball5': 'Fireball5.png',
      'Fireball6': 'Fireball6.png',
      'Fireball7': 'Fireball7.png',
      'Fireball8': 'Fireball8.png',
      'Heart': 'Heart.png',
      'Hero': 'Hero.png',
      'Hero10': 'Hero10.png',
      'Hero2': 'Hero2.png',
      'Hero3': 'Hero3.png',
      'Hero4': 'Hero4.png',
      'Hero5': 'Hero5.png',
      'Hero6': 'Hero6.png',
      'Hero7': 'Hero7.png',
      'Hero8': 'Hero8.png',
      'Hero9': 'Hero9.png',
      'Pendulum': 'Pendulum.png',
      'PlaceHolder': 'PlaceHolder.png'
    };

    AppData.levels = {
      'Level': Level,
      'Level2': Level2
    };

    return AppData;

  })();

}).call(this);
