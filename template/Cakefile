espresso_path = '/Users/mollerhoj3/work/coffee/espresso/'

#Requirements
{spawn, exec} = require 'child_process'
fs     = require 'fs'
path = require 'path'
require './settings'

test_files = [
  'Test_Framework'
  'test/Entity_test'
  'app/starters/Test_Start'
]

# HELPER METHODS
# Get all resources from a folder
harvest = (resource) ->
  dir = fs.readdirSync(resource)
  dir = remove_from_array(dir,/^\..*/)
  return dir

# Extending array class with remove method
Array::remove = (e) -> @[t..t] = [] if (t = @indexOf(e)) > -1

# Remove all regexp matches from array
remove_from_array = (arr,reg) ->
  temp_arr = arr.slice(0)
  for i in temp_arr
    if reg.test i
      arr.remove i
  return arr

#remove extensions
remove_extension = (str) ->
  str.replace(/\.[^/.]+$/,'')

remove_extensions = (array) ->
  (f=remove_extension(f) for f in array)

#Clear a file
clear_file = (file) ->
  fs.writeFileSync file, '','utf8', (err) -> throw err if err

#Put to a file
put_to_file = (file,put) ->
  fs.appendFileSync file, put + "\n",'utf8', (err) ->
    throw err if err

# Get name of the app
app_name = ->
  return path.basename(__dirname)

#add a folder
add_folder = (files,folder) ->
  ent = ((f=folder+"/"+f) for f in remove_extensions(harvest(folder)))
  files = files.concat(ent)   # + ent

# Get the list of classes to be loaded in the right order
classlist= (mode)->
  files = []
  files = add_folder(files,espresso_path + 'app/control/')
  files = add_folder(files,'entities')
  files = add_folder(files,'levels')
  if mode == 'build'
    files = add_folder(files,espresso_path + 'app/development')
    files.push(espresso_path + 'app/starters/Development_Start')
  else
    files.push(espresso_path + 'app/starters/Production_Start')
  files.push('AppData')
  return files

# BUILD METHODS

# Build the AppData class
build_appdata = ->
  file = "AppData.coffee"
  clear_file(file)
  put_to_file(file,"
class AppData\n
  @game_name = \"#{app_name()}\"\n
  @width = #{settings_width}\n
  @height = #{settings_height}\n
  @scale = #{settings_scale}\n
  @grid_on = #{settings_grid_on}\n
  @entities:\n
#{write_appdata_res('entities')}
  @sprites:\n
#{write_appdata_sprites()}
  @levels:\n
#{write_appdata_res('levels')}
")

write_appdata_sprites = ->
  l = harvest('sprites')
  str = ""
  for f in l
    str+="   '" + remove_extension(f) + "': '" + f + "'\n"
  return str

write_appdata_res =(res) ->
  l = harvest(res)
  str = ""
  for f in l
    str+="   '" + remove_extension(f) + "': " + remove_extension(f) + "\n"
  return str
# Build index.html
build_index = (mode)->

  file = "output/index.html"
  clear_file(file)
  put_to_file(file,"
<head>\n
  <script type='text/javascript' src='libraries/FileSaver.js'></script>
  <script type='text/javascript' src='libraries/zepto.js'></script>\n
  <script type='text/javascript' src='game.js'></script>\n
  <style>\n
#{write_fonts()}
  </style>\n
  <link href='http://fonts.googleapis.com/css?family=Gochi+Hand' rel='stylesheet' type='text/css'>\n
  <title>My Game</title>\n
</head>\n
<body>\n
  <div id='game'></div>\n
#{write_development_tools(mode)}\n
</body>")
  return false

write_fonts = ->
  str = ''
  for font in harvest('fonts')
    str+= "    @font-face {font-family: '"+remove_extension(font)+"'; src: url('fonts/"+font+"');}\n"
  return str

write_development_tools = (mode) ->
  console.log mode
  if mode!='build'
    return ""
  str = "
  <button type='button' id='pause_toggle'>Pause</button>\n
  <select id='entity_selector'>\n
#{write_development_selector('entities')}
  </select>\n
  <select id='level_selector'>\n
#{write_development_selector('levels')}
  </select>\n
  </br>\n
  <button type='button' id='grid_toggle'>Grid</button>\n
  <span>x:</span>\n
  <input id='grid_x'type='Number' value='0'></input>\n
  <span>y:</span>\n
  <input id='grid_y'type='Number' value='0'></input>\n
  <span>width:</span>\n
  <input id='grid_width' type='Number' value='16'></input>\n
  <span>height:</span>\n
  <input id='grid_height' type='Number' value='16'></input>
  </br>\n
  <select id='save_type_selector'>\n
    <option value='Flow'>Flow</option>\n
    <option value='Grid'>Grid</option>\n
    <option value='Vector'>Vector</option>\n
  </select>\n
  <button type='button' id='save_button'>Save</button>"
  return str

write_development_selector= (resource) ->
  str = ''
  for res in harvest(resource)
    str+= "    <option value='#{remove_extension(res)}'>#{remove_extension(res)}</option>\n"
  return str

# Build all resources
build_resources = ->
  exec 'cp -r fonts output'
  exec 'cp -r sounds output'
  exec 'cp -r sprites output'
  exec 'cp -r libraries output'

# Build game.js
build_game =(mode) ->
  files = classlist(mode)
  appContents = new Array remaining = files.length
  for file, index in files then do (file, index) ->
    fs.readFile "#{file}.coffee", 'utf8', (err, fileContents) ->
      throw err if err
      appContents[index] = fileContents
      if --remaining is 0
        fs.writeFile 'output/game.coffee', appContents.join('\n\n'), 'utf8', (err) ->
          throw err if err


compile_game = ->
  exec 'coffee --compile output/game.coffee', (err, stdout, stderr) ->
    throw err if err
    if stdout or stderr
      console.log stdout + stderr
    fs.unlink 'output/game.coffee', (err) ->
      throw err if err

#Build all
build_all = ->
  build_resources()
  build_appdata()
  build_index('build')
  build_game('build')
  compile_game()

#Export all
export_all = ->
  build_resources()
  build_appdata()
  build_index('export')
  build_game('export')
  compile_game()

#TASKS
task 'export', 'Export single application file from source files', ->
  export_all()
  console.log 'Done.'

task 'build', 'Build single application file from source files', ->
  build_all()
  console.log 'Done.'

task 'build_resources', 'Compile all resources', ->
  build_resources()
  console.log 'Done.'

task 'build_appdata', 'Compile AppData file', ->
  build_appdata()
  console.log 'Done.'

task 'build_game', 'Compile game.js', ->
  build_game()
  console.log 'Done.'

task 'build_index', 'Compile index.html', ->
  build_index()
  console.log 'Done.'

task 'test', 'Test', ->
  build_appdata()
  build_game()
  exec 'coffee output/game.coffee', (err, stdout, stderr) ->
    throw err if err
    if stdout or stderr
      console.log stdout + stderr
